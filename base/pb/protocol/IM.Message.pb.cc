// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Message.proto

#include "IM.Message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace IM {
namespace Message {
constexpr IMMsgData::IMMsgData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_user_id_(0u)
  , to_session_id_(0u)
  , msg_id_(0u)
  , create_time_(0u)
  , msg_type_(0)
{}
struct IMMsgDataDefaultTypeInternal {
  constexpr IMMsgDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMMsgDataDefaultTypeInternal() {}
  union {
    IMMsgData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMMsgDataDefaultTypeInternal _IMMsgData_default_instance_;
constexpr IMMsgDataAck::IMMsgDataAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , session_id_(0u)
  , msg_id_(0u)
  , session_type_(0)
{}
struct IMMsgDataAckDefaultTypeInternal {
  constexpr IMMsgDataAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMMsgDataAckDefaultTypeInternal() {}
  union {
    IMMsgDataAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMMsgDataAckDefaultTypeInternal _IMMsgDataAck_default_instance_;
constexpr IMMsgDataReadAck::IMMsgDataReadAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , session_id_(0u)
  , msg_id_(0u)
  , session_type_(0)
{}
struct IMMsgDataReadAckDefaultTypeInternal {
  constexpr IMMsgDataReadAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMMsgDataReadAckDefaultTypeInternal() {}
  union {
    IMMsgDataReadAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMMsgDataReadAckDefaultTypeInternal _IMMsgDataReadAck_default_instance_;
constexpr IMMsgDataReadNotify::IMMsgDataReadNotify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(0u)
  , session_id_(0u)
  , msg_id_(0u)
  , session_type_(0)
{}
struct IMMsgDataReadNotifyDefaultTypeInternal {
  constexpr IMMsgDataReadNotifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMMsgDataReadNotifyDefaultTypeInternal() {}
  union {
    IMMsgDataReadNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMMsgDataReadNotifyDefaultTypeInternal _IMMsgDataReadNotify_default_instance_;
constexpr IMClientTimeReq::IMClientTimeReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct IMClientTimeReqDefaultTypeInternal {
  constexpr IMClientTimeReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMClientTimeReqDefaultTypeInternal() {}
  union {
    IMClientTimeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMClientTimeReqDefaultTypeInternal _IMClientTimeReq_default_instance_;
constexpr IMClientTimeRsp::IMClientTimeRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_time_(0u){}
struct IMClientTimeRspDefaultTypeInternal {
  constexpr IMClientTimeRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMClientTimeRspDefaultTypeInternal() {}
  union {
    IMClientTimeRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMClientTimeRspDefaultTypeInternal _IMClientTimeRsp_default_instance_;
constexpr IMUnreadMsgCntReq::IMUnreadMsgCntReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u){}
struct IMUnreadMsgCntReqDefaultTypeInternal {
  constexpr IMUnreadMsgCntReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMUnreadMsgCntReqDefaultTypeInternal() {}
  union {
    IMUnreadMsgCntReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMUnreadMsgCntReqDefaultTypeInternal _IMUnreadMsgCntReq_default_instance_;
constexpr IMUnreadMsgCntRsp::IMUnreadMsgCntRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unreadinfo_list_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , total_cnt_(0u){}
struct IMUnreadMsgCntRspDefaultTypeInternal {
  constexpr IMUnreadMsgCntRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMUnreadMsgCntRspDefaultTypeInternal() {}
  union {
    IMUnreadMsgCntRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMUnreadMsgCntRspDefaultTypeInternal _IMUnreadMsgCntRsp_default_instance_;
constexpr IMGetMsgListReq::IMGetMsgListReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u)
  , msg_id_begin_(0u)
  , msg_cnt_(0u){}
struct IMGetMsgListReqDefaultTypeInternal {
  constexpr IMGetMsgListReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetMsgListReqDefaultTypeInternal() {}
  union {
    IMGetMsgListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetMsgListReqDefaultTypeInternal _IMGetMsgListReq_default_instance_;
constexpr IMGetMsgListRsp::IMGetMsgListRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_list_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u)
  , msg_id_begin_(0u){}
struct IMGetMsgListRspDefaultTypeInternal {
  constexpr IMGetMsgListRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetMsgListRspDefaultTypeInternal() {}
  union {
    IMGetMsgListRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetMsgListRspDefaultTypeInternal _IMGetMsgListRsp_default_instance_;
constexpr IMGetLatestMsgIdReq::IMGetLatestMsgIdReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u){}
struct IMGetLatestMsgIdReqDefaultTypeInternal {
  constexpr IMGetLatestMsgIdReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetLatestMsgIdReqDefaultTypeInternal() {}
  union {
    IMGetLatestMsgIdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetLatestMsgIdReqDefaultTypeInternal _IMGetLatestMsgIdReq_default_instance_;
constexpr IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u)
  , latest_msg_id_(0u){}
struct IMGetLatestMsgIdRspDefaultTypeInternal {
  constexpr IMGetLatestMsgIdRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetLatestMsgIdRspDefaultTypeInternal() {}
  union {
    IMGetLatestMsgIdRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetLatestMsgIdRspDefaultTypeInternal _IMGetLatestMsgIdRsp_default_instance_;
constexpr IMGetMsgByIdReq::IMGetMsgByIdReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_id_list_()
  , _msg_id_list_cached_byte_size_(0)
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u){}
struct IMGetMsgByIdReqDefaultTypeInternal {
  constexpr IMGetMsgByIdReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetMsgByIdReqDefaultTypeInternal() {}
  union {
    IMGetMsgByIdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetMsgByIdReqDefaultTypeInternal _IMGetMsgByIdReq_default_instance_;
constexpr IMGetMsgByIdRsp::IMGetMsgByIdRsp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_list_()
  , attach_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(0u)
  , session_type_(0)

  , session_id_(0u){}
struct IMGetMsgByIdRspDefaultTypeInternal {
  constexpr IMGetMsgByIdRspDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMGetMsgByIdRspDefaultTypeInternal() {}
  union {
    IMGetMsgByIdRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMGetMsgByIdRspDefaultTypeInternal _IMGetMsgByIdRsp_default_instance_;
}  // namespace Message
}  // namespace IM
namespace IM {
namespace Message {

// ===================================================================

class IMMsgData::_Internal {
 public:
};

IMMsgData::IMMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMMsgData)
}
IMMsgData::IMMsgData(const IMMsgData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_data().empty()) {
    msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_data(), 
      GetArenaForAllocation());
  }
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgData)
}

inline void IMMsgData::SharedCtor() {
msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(msg_type_));
}

IMMsgData::~IMMsgData() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMMsgData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMMsgData::ArenaDtor(void* object) {
  IMMsgData* _this = reinterpret_cast< IMMsgData* >(object);
  (void)_this;
}
void IMMsgData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMMsgData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMMsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_data_.ClearToEmpty();
  attach_data_.ClearToEmpty();
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(msg_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMMsgData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 from_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          from_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          to_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 create_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.MsgType msg_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::IM::BaseDefine::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes msg_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMMsgData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from_user_id(), target);
  }

  // uint32 to_session_id = 2;
  if (this->_internal_to_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to_session_id(), target);
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msg_id(), target);
  }

  // uint32 create_time = 4;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_create_time(), target);
  }

  // .IM.BaseDefine.MsgType msg_type = 5;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_msg_type(), target);
  }

  // bytes msg_data = 6;
  if (!this->_internal_msg_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_msg_data(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgData)
  return target;
}

size_t IMMsgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg_data = 6;
  if (!this->_internal_msg_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 from_user_id = 1;
  if (this->_internal_from_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_from_user_id());
  }

  // uint32 to_session_id = 2;
  if (this->_internal_to_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_to_session_id());
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id());
  }

  // uint32 create_time = 4;
  if (this->_internal_create_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_create_time());
  }

  // .IM.BaseDefine.MsgType msg_type = 5;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMMsgData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMMsgData*>(
      &from));
}

void IMMsgData::MergeFrom(const IMMsgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_data().empty()) {
    _internal_set_msg_data(from._internal_msg_data());
  }
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_from_user_id() != 0) {
    _internal_set_from_user_id(from._internal_from_user_id());
  }
  if (from._internal_to_session_id() != 0) {
    _internal_set_to_session_id(from._internal_to_session_id());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_msg_type() != 0) {
    _internal_set_msg_type(from._internal_msg_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMMsgData::CopyFrom(const IMMsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgData::IsInitialized() const {
  return true;
}

void IMMsgData::InternalSwap(IMMsgData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_data_, lhs_arena,
      &other->msg_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgData, msg_type_)
      + sizeof(IMMsgData::msg_type_)
      - PROTOBUF_FIELD_OFFSET(IMMsgData, from_user_id_)>(
          reinterpret_cast<char*>(&from_user_id_),
          reinterpret_cast<char*>(&other->from_user_id_));
}

std::string IMMsgData::GetTypeName() const {
  return "IM.Message.IMMsgData";
}


// ===================================================================

class IMMsgDataAck::_Internal {
 public:
};

IMMsgDataAck::IMMsgDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMMsgDataAck)
}
IMMsgDataAck::IMMsgDataAck(const IMMsgDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataAck)
}

inline void IMMsgDataAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

IMMsgDataAck::~IMMsgDataAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMMsgDataAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMMsgDataAck::ArenaDtor(void* object) {
  IMMsgDataAck* _this = reinterpret_cast< IMMsgDataAck* >(object);
  (void)_this;
}
void IMMsgDataAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMMsgDataAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMMsgDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMMsgDataAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMMsgDataAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgDataAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_id(), target);
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msg_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgDataAck)
  return target;
}

size_t IMMsgDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id());
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMMsgDataAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMMsgDataAck*>(
      &from));
}

void IMMsgDataAck::MergeFrom(const IMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMMsgDataAck::CopyFrom(const IMMsgDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataAck::IsInitialized() const {
  return true;
}

void IMMsgDataAck::InternalSwap(IMMsgDataAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgDataAck, session_type_)
      + sizeof(IMMsgDataAck::session_type_)
      - PROTOBUF_FIELD_OFFSET(IMMsgDataAck, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMMsgDataAck::GetTypeName() const {
  return "IM.Message.IMMsgDataAck";
}


// ===================================================================

class IMMsgDataReadAck::_Internal {
 public:
};

IMMsgDataReadAck::IMMsgDataReadAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMMsgDataReadAck)
}
IMMsgDataReadAck::IMMsgDataReadAck(const IMMsgDataReadAck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadAck)
}

inline void IMMsgDataReadAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

IMMsgDataReadAck::~IMMsgDataReadAck() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMMsgDataReadAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMMsgDataReadAck::ArenaDtor(void* object) {
  IMMsgDataReadAck* _this = reinterpret_cast< IMMsgDataReadAck* >(object);
  (void)_this;
}
void IMMsgDataReadAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMMsgDataReadAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMMsgDataReadAck::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataReadAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMMsgDataReadAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMMsgDataReadAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgDataReadAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_id(), target);
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msg_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgDataReadAck)
  return target;
}

size_t IMMsgDataReadAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataReadAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id());
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMMsgDataReadAck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMMsgDataReadAck*>(
      &from));
}

void IMMsgDataReadAck::MergeFrom(const IMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataReadAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMMsgDataReadAck::CopyFrom(const IMMsgDataReadAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataReadAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadAck::IsInitialized() const {
  return true;
}

void IMMsgDataReadAck::InternalSwap(IMMsgDataReadAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgDataReadAck, session_type_)
      + sizeof(IMMsgDataReadAck::session_type_)
      - PROTOBUF_FIELD_OFFSET(IMMsgDataReadAck, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMMsgDataReadAck::GetTypeName() const {
  return "IM.Message.IMMsgDataReadAck";
}


// ===================================================================

class IMMsgDataReadNotify::_Internal {
 public:
};

IMMsgDataReadNotify::IMMsgDataReadNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMMsgDataReadNotify)
}
IMMsgDataReadNotify::IMMsgDataReadNotify(const IMMsgDataReadNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMMsgDataReadNotify)
}

inline void IMMsgDataReadNotify::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
}

IMMsgDataReadNotify::~IMMsgDataReadNotify() {
  // @@protoc_insertion_point(destructor:IM.Message.IMMsgDataReadNotify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMMsgDataReadNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMMsgDataReadNotify::ArenaDtor(void* object) {
  IMMsgDataReadNotify* _this = reinterpret_cast< IMMsgDataReadNotify* >(object);
  (void)_this;
}
void IMMsgDataReadNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMMsgDataReadNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMMsgDataReadNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMMsgDataReadNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMMsgDataReadNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMMsgDataReadNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMMsgDataReadNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_id(), target);
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msg_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_session_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMMsgDataReadNotify)
  return target;
}

size_t IMMsgDataReadNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMMsgDataReadNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 session_id = 2;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id = 3;
  if (this->_internal_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id());
  }

  // .IM.BaseDefine.SessionType session_type = 4;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMMsgDataReadNotify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMMsgDataReadNotify*>(
      &from));
}

void IMMsgDataReadNotify::MergeFrom(const IMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMMsgDataReadNotify)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id() != 0) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMMsgDataReadNotify::CopyFrom(const IMMsgDataReadNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMMsgDataReadNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgDataReadNotify::IsInitialized() const {
  return true;
}

void IMMsgDataReadNotify::InternalSwap(IMMsgDataReadNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMMsgDataReadNotify, session_type_)
      + sizeof(IMMsgDataReadNotify::session_type_)
      - PROTOBUF_FIELD_OFFSET(IMMsgDataReadNotify, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMMsgDataReadNotify::GetTypeName() const {
  return "IM.Message.IMMsgDataReadNotify";
}


// ===================================================================

class IMClientTimeReq::_Internal {
 public:
};

IMClientTimeReq::IMClientTimeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMClientTimeReq)
}
IMClientTimeReq::IMClientTimeReq(const IMClientTimeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeReq)
}

inline void IMClientTimeReq::SharedCtor() {
}

IMClientTimeReq::~IMClientTimeReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMClientTimeReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMClientTimeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMClientTimeReq::ArenaDtor(void* object) {
  IMClientTimeReq* _this = reinterpret_cast< IMClientTimeReq* >(object);
  (void)_this;
}
void IMClientTimeReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMClientTimeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMClientTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMClientTimeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* IMClientTimeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMClientTimeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMClientTimeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMClientTimeReq)
  return target;
}

size_t IMClientTimeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMClientTimeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMClientTimeReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMClientTimeReq*>(
      &from));
}

void IMClientTimeReq::MergeFrom(const IMClientTimeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMClientTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMClientTimeReq::CopyFrom(const IMClientTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMClientTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMClientTimeReq::IsInitialized() const {
  return true;
}

void IMClientTimeReq::InternalSwap(IMClientTimeReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string IMClientTimeReq::GetTypeName() const {
  return "IM.Message.IMClientTimeReq";
}


// ===================================================================

class IMClientTimeRsp::_Internal {
 public:
};

IMClientTimeRsp::IMClientTimeRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMClientTimeRsp)
}
IMClientTimeRsp::IMClientTimeRsp(const IMClientTimeRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  server_time_ = from.server_time_;
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMClientTimeRsp)
}

inline void IMClientTimeRsp::SharedCtor() {
server_time_ = 0u;
}

IMClientTimeRsp::~IMClientTimeRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMClientTimeRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMClientTimeRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IMClientTimeRsp::ArenaDtor(void* object) {
  IMClientTimeRsp* _this = reinterpret_cast< IMClientTimeRsp* >(object);
  (void)_this;
}
void IMClientTimeRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMClientTimeRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMClientTimeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMClientTimeRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_time_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMClientTimeRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 server_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMClientTimeRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMClientTimeRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMClientTimeRsp)
  return target;
}

size_t IMClientTimeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMClientTimeRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->_internal_server_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMClientTimeRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMClientTimeRsp*>(
      &from));
}

void IMClientTimeRsp::MergeFrom(const IMClientTimeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMClientTimeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMClientTimeRsp::CopyFrom(const IMClientTimeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMClientTimeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMClientTimeRsp::IsInitialized() const {
  return true;
}

void IMClientTimeRsp::InternalSwap(IMClientTimeRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(server_time_, other->server_time_);
}

std::string IMClientTimeRsp::GetTypeName() const {
  return "IM.Message.IMClientTimeRsp";
}


// ===================================================================

class IMUnreadMsgCntReq::_Internal {
 public:
};

IMUnreadMsgCntReq::IMUnreadMsgCntReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMUnreadMsgCntReq)
}
IMUnreadMsgCntReq::IMUnreadMsgCntReq(const IMUnreadMsgCntReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntReq)
}

inline void IMUnreadMsgCntReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_ = 0u;
}

IMUnreadMsgCntReq::~IMUnreadMsgCntReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMUnreadMsgCntReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMUnreadMsgCntReq::ArenaDtor(void* object) {
  IMUnreadMsgCntReq* _this = reinterpret_cast< IMUnreadMsgCntReq* >(object);
  (void)_this;
}
void IMUnreadMsgCntReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMUnreadMsgCntReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUnreadMsgCntReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMUnreadMsgCntReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmpty();
  user_id_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* IMUnreadMsgCntReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUnreadMsgCntReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMUnreadMsgCntReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMUnreadMsgCntReq)
  return target;
}

size_t IMUnreadMsgCntReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMUnreadMsgCntReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUnreadMsgCntReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMUnreadMsgCntReq*>(
      &from));
}

void IMUnreadMsgCntReq::MergeFrom(const IMUnreadMsgCntReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMUnreadMsgCntReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMUnreadMsgCntReq::CopyFrom(const IMUnreadMsgCntReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMUnreadMsgCntReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntReq::IsInitialized() const {
  return true;
}

void IMUnreadMsgCntReq::InternalSwap(IMUnreadMsgCntReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  swap(user_id_, other->user_id_);
}

std::string IMUnreadMsgCntReq::GetTypeName() const {
  return "IM.Message.IMUnreadMsgCntReq";
}


// ===================================================================

class IMUnreadMsgCntRsp::_Internal {
 public:
};

void IMUnreadMsgCntRsp::clear_unreadinfo_list() {
  unreadinfo_list_.Clear();
}
IMUnreadMsgCntRsp::IMUnreadMsgCntRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  unreadinfo_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMUnreadMsgCntRsp)
}
IMUnreadMsgCntRsp::IMUnreadMsgCntRsp(const IMUnreadMsgCntRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      unreadinfo_list_(from.unreadinfo_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_cnt_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(total_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMUnreadMsgCntRsp)
}

inline void IMUnreadMsgCntRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_cnt_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(total_cnt_));
}

IMUnreadMsgCntRsp::~IMUnreadMsgCntRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMUnreadMsgCntRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMUnreadMsgCntRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMUnreadMsgCntRsp::ArenaDtor(void* object) {
  IMUnreadMsgCntRsp* _this = reinterpret_cast< IMUnreadMsgCntRsp* >(object);
  (void)_this;
}
void IMUnreadMsgCntRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMUnreadMsgCntRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUnreadMsgCntRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMUnreadMsgCntRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unreadinfo_list_.Clear();
  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_cnt_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(total_cnt_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMUnreadMsgCntRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_cnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          total_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unreadinfo_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUnreadMsgCntRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMUnreadMsgCntRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // uint32 total_cnt = 2;
  if (this->_internal_total_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_cnt(), target);
  }

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unreadinfo_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_unreadinfo_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMUnreadMsgCntRsp)
  return target;
}

size_t IMUnreadMsgCntRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMUnreadMsgCntRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
  total_size += 1UL * this->_internal_unreadinfo_list_size();
  for (const auto& msg : this->unreadinfo_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // uint32 total_cnt = 2;
  if (this->_internal_total_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_total_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUnreadMsgCntRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMUnreadMsgCntRsp*>(
      &from));
}

void IMUnreadMsgCntRsp::MergeFrom(const IMUnreadMsgCntRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMUnreadMsgCntRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  unreadinfo_list_.MergeFrom(from.unreadinfo_list_);
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_total_cnt() != 0) {
    _internal_set_total_cnt(from._internal_total_cnt());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMUnreadMsgCntRsp::CopyFrom(const IMUnreadMsgCntRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMUnreadMsgCntRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUnreadMsgCntRsp::IsInitialized() const {
  return true;
}

void IMUnreadMsgCntRsp::InternalSwap(IMUnreadMsgCntRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  unreadinfo_list_.InternalSwap(&other->unreadinfo_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUnreadMsgCntRsp, total_cnt_)
      + sizeof(IMUnreadMsgCntRsp::total_cnt_)
      - PROTOBUF_FIELD_OFFSET(IMUnreadMsgCntRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMUnreadMsgCntRsp::GetTypeName() const {
  return "IM.Message.IMUnreadMsgCntRsp";
}


// ===================================================================

class IMGetMsgListReq::_Internal {
 public:
};

IMGetMsgListReq::IMGetMsgListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetMsgListReq)
}
IMGetMsgListReq::IMGetMsgListReq(const IMGetMsgListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListReq)
}

inline void IMGetMsgListReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_cnt_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_cnt_));
}

IMGetMsgListReq::~IMGetMsgListReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGetMsgListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgListReq::ArenaDtor(void* object) {
  IMGetMsgListReq* _this = reinterpret_cast< IMGetMsgListReq* >(object);
  (void)_this;
}
void IMGetMsgListReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetMsgListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetMsgListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_cnt_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(msg_cnt_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetMsgListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id_begin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          msg_id_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_cnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          msg_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetMsgListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // uint32 msg_id_begin = 4;
  if (this->_internal_msg_id_begin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_msg_id_begin(), target);
  }

  // uint32 msg_cnt = 5;
  if (this->_internal_msg_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_msg_cnt(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgListReq)
  return target;
}

size_t IMGetMsgListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id_begin = 4;
  if (this->_internal_msg_id_begin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id_begin());
  }

  // uint32 msg_cnt = 5;
  if (this->_internal_msg_cnt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_cnt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetMsgListReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetMsgListReq*>(
      &from));
}

void IMGetMsgListReq::MergeFrom(const IMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgListReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id_begin() != 0) {
    _internal_set_msg_id_begin(from._internal_msg_id_begin());
  }
  if (from._internal_msg_cnt() != 0) {
    _internal_set_msg_cnt(from._internal_msg_cnt());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetMsgListReq::CopyFrom(const IMGetMsgListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListReq::IsInitialized() const {
  return true;
}

void IMGetMsgListReq::InternalSwap(IMGetMsgListReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetMsgListReq, msg_cnt_)
      + sizeof(IMGetMsgListReq::msg_cnt_)
      - PROTOBUF_FIELD_OFFSET(IMGetMsgListReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMGetMsgListReq::GetTypeName() const {
  return "IM.Message.IMGetMsgListReq";
}


// ===================================================================

class IMGetMsgListRsp::_Internal {
 public:
};

void IMGetMsgListRsp::clear_msg_list() {
  msg_list_.Clear();
}
IMGetMsgListRsp::IMGetMsgListRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  msg_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetMsgListRsp)
}
IMGetMsgListRsp::IMGetMsgListRsp(const IMGetMsgListRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_begin_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_id_begin_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgListRsp)
}

inline void IMGetMsgListRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_id_begin_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(msg_id_begin_));
}

IMGetMsgListRsp::~IMGetMsgListRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgListRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGetMsgListRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgListRsp::ArenaDtor(void* object) {
  IMGetMsgListRsp* _this = reinterpret_cast< IMGetMsgListRsp* >(object);
  (void)_this;
}
void IMGetMsgListRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetMsgListRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetMsgListRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgListRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_begin_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(msg_id_begin_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetMsgListRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 msg_id_begin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          msg_id_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetMsgListRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgListRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // uint32 msg_id_begin = 4;
  if (this->_internal_msg_id_begin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_msg_id_begin(), target);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_msg_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgListRsp)
  return target;
}

size_t IMGetMsgListRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgListRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.MsgInfo msg_list = 5;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 msg_id_begin = 4;
  if (this->_internal_msg_id_begin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_id_begin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetMsgListRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetMsgListRsp*>(
      &from));
}

void IMGetMsgListRsp::MergeFrom(const IMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgListRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_msg_id_begin() != 0) {
    _internal_set_msg_id_begin(from._internal_msg_id_begin());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetMsgListRsp::CopyFrom(const IMGetMsgListRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgListRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgListRsp::IsInitialized() const {
  return true;
}

void IMGetMsgListRsp::InternalSwap(IMGetMsgListRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetMsgListRsp, msg_id_begin_)
      + sizeof(IMGetMsgListRsp::msg_id_begin_)
      - PROTOBUF_FIELD_OFFSET(IMGetMsgListRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMGetMsgListRsp::GetTypeName() const {
  return "IM.Message.IMGetMsgListRsp";
}


// ===================================================================

class IMGetLatestMsgIdReq::_Internal {
 public:
};

IMGetLatestMsgIdReq::IMGetLatestMsgIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetLatestMsgIdReq)
}
IMGetLatestMsgIdReq::IMGetLatestMsgIdReq(const IMGetLatestMsgIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdReq)
}

inline void IMGetLatestMsgIdReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
}

IMGetLatestMsgIdReq::~IMGetLatestMsgIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGetLatestMsgIdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetLatestMsgIdReq::ArenaDtor(void* object) {
  IMGetLatestMsgIdReq* _this = reinterpret_cast< IMGetLatestMsgIdReq* >(object);
  (void)_this;
}
void IMGetLatestMsgIdReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetLatestMsgIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetLatestMsgIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetLatestMsgIdReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetLatestMsgIdReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetLatestMsgIdReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetLatestMsgIdReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetLatestMsgIdReq)
  return target;
}

size_t IMGetLatestMsgIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetLatestMsgIdReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetLatestMsgIdReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetLatestMsgIdReq*>(
      &from));
}

void IMGetLatestMsgIdReq::MergeFrom(const IMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetLatestMsgIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetLatestMsgIdReq::CopyFrom(const IMGetLatestMsgIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetLatestMsgIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdReq::IsInitialized() const {
  return true;
}

void IMGetLatestMsgIdReq::InternalSwap(IMGetLatestMsgIdReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetLatestMsgIdReq, session_id_)
      + sizeof(IMGetLatestMsgIdReq::session_id_)
      - PROTOBUF_FIELD_OFFSET(IMGetLatestMsgIdReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMGetLatestMsgIdReq::GetTypeName() const {
  return "IM.Message.IMGetLatestMsgIdReq";
}


// ===================================================================

class IMGetLatestMsgIdRsp::_Internal {
 public:
};

IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetLatestMsgIdRsp)
}
IMGetLatestMsgIdRsp::IMGetLatestMsgIdRsp(const IMGetLatestMsgIdRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_msg_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(latest_msg_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetLatestMsgIdRsp)
}

inline void IMGetLatestMsgIdRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&latest_msg_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(latest_msg_id_));
}

IMGetLatestMsgIdRsp::~IMGetLatestMsgIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetLatestMsgIdRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGetLatestMsgIdRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetLatestMsgIdRsp::ArenaDtor(void* object) {
  IMGetLatestMsgIdRsp* _this = reinterpret_cast< IMGetLatestMsgIdRsp* >(object);
  (void)_this;
}
void IMGetLatestMsgIdRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetLatestMsgIdRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetLatestMsgIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetLatestMsgIdRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_msg_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(latest_msg_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetLatestMsgIdRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 latest_msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          latest_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetLatestMsgIdRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetLatestMsgIdRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // uint32 latest_msg_id = 4;
  if (this->_internal_latest_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_latest_msg_id(), target);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetLatestMsgIdRsp)
  return target;
}

size_t IMGetLatestMsgIdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetLatestMsgIdRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  // uint32 latest_msg_id = 4;
  if (this->_internal_latest_msg_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_latest_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetLatestMsgIdRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetLatestMsgIdRsp*>(
      &from));
}

void IMGetLatestMsgIdRsp::MergeFrom(const IMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetLatestMsgIdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_latest_msg_id() != 0) {
    _internal_set_latest_msg_id(from._internal_latest_msg_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetLatestMsgIdRsp::CopyFrom(const IMGetLatestMsgIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetLatestMsgIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetLatestMsgIdRsp::IsInitialized() const {
  return true;
}

void IMGetLatestMsgIdRsp::InternalSwap(IMGetLatestMsgIdRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetLatestMsgIdRsp, latest_msg_id_)
      + sizeof(IMGetLatestMsgIdRsp::latest_msg_id_)
      - PROTOBUF_FIELD_OFFSET(IMGetLatestMsgIdRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMGetLatestMsgIdRsp::GetTypeName() const {
  return "IM.Message.IMGetLatestMsgIdRsp";
}


// ===================================================================

class IMGetMsgByIdReq::_Internal {
 public:
};

IMGetMsgByIdReq::IMGetMsgByIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  msg_id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetMsgByIdReq)
}
IMGetMsgByIdReq::IMGetMsgByIdReq(const IMGetMsgByIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      msg_id_list_(from.msg_id_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdReq)
}

inline void IMGetMsgByIdReq::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
}

IMGetMsgByIdReq::~IMGetMsgByIdReq() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGetMsgByIdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgByIdReq::ArenaDtor(void* object) {
  IMGetMsgByIdReq* _this = reinterpret_cast< IMGetMsgByIdReq* >(object);
  (void)_this;
}
void IMGetMsgByIdReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetMsgByIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetMsgByIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgByIdReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_list_.Clear();
  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetMsgByIdReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 msg_id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_msg_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_msg_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetMsgByIdReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgByIdReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // repeated uint32 msg_id_list = 4;
  {
    int byte_size = _msg_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_msg_id_list(), byte_size, target);
    }
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgByIdReq)
  return target;
}

size_t IMGetMsgByIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgByIdReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 msg_id_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->msg_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _msg_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetMsgByIdReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetMsgByIdReq*>(
      &from));
}

void IMGetMsgByIdReq::MergeFrom(const IMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgByIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msg_id_list_.MergeFrom(from.msg_id_list_);
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetMsgByIdReq::CopyFrom(const IMGetMsgByIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgByIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdReq::IsInitialized() const {
  return true;
}

void IMGetMsgByIdReq::InternalSwap(IMGetMsgByIdReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_id_list_.InternalSwap(&other->msg_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetMsgByIdReq, session_id_)
      + sizeof(IMGetMsgByIdReq::session_id_)
      - PROTOBUF_FIELD_OFFSET(IMGetMsgByIdReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMGetMsgByIdReq::GetTypeName() const {
  return "IM.Message.IMGetMsgByIdReq";
}


// ===================================================================

class IMGetMsgByIdRsp::_Internal {
 public:
};

void IMGetMsgByIdRsp::clear_msg_list() {
  msg_list_.Clear();
}
IMGetMsgByIdRsp::IMGetMsgByIdRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  msg_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IM.Message.IMGetMsgByIdRsp)
}
IMGetMsgByIdRsp::IMGetMsgByIdRsp(const IMGetMsgByIdRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      msg_list_(from.msg_list_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attach_data().empty()) {
    attach_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attach_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Message.IMGetMsgByIdRsp)
}

inline void IMGetMsgByIdRsp::SharedCtor() {
attach_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attach_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
}

IMGetMsgByIdRsp::~IMGetMsgByIdRsp() {
  // @@protoc_insertion_point(destructor:IM.Message.IMGetMsgByIdRsp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void IMGetMsgByIdRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  attach_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IMGetMsgByIdRsp::ArenaDtor(void* object) {
  IMGetMsgByIdRsp* _this = reinterpret_cast< IMGetMsgByIdRsp* >(object);
  (void)_this;
}
void IMGetMsgByIdRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMGetMsgByIdRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMGetMsgByIdRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Message.IMGetMsgByIdRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  attach_data_.ClearToEmpty();
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(session_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* IMGetMsgByIdRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IM.BaseDefine.SessionType session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::IM::BaseDefine::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes attach_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_attach_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMGetMsgByIdRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IM.Message.IMGetMsgByIdRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_session_type(), target);
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_session_id(), target);
  }

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_msg_list(i), target, stream);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_attach_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Message.IMGetMsgByIdRsp)
  return target;
}

size_t IMGetMsgByIdRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Message.IMGetMsgByIdRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.MsgInfo msg_list = 4;
  total_size += 1UL * this->_internal_msg_list_size();
  for (const auto& msg : this->msg_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes attach_data = 20;
  if (!this->_internal_attach_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_attach_data());
  }

  // uint32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_id());
  }

  // .IM.BaseDefine.SessionType session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  // uint32 session_id = 3;
  if (this->_internal_session_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMGetMsgByIdRsp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IMGetMsgByIdRsp*>(
      &from));
}

void IMGetMsgByIdRsp::MergeFrom(const IMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Message.IMGetMsgByIdRsp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (!from._internal_attach_data().empty()) {
    _internal_set_attach_data(from._internal_attach_data());
  }
  if (from._internal_user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_session_type() != 0) {
    _internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IMGetMsgByIdRsp::CopyFrom(const IMGetMsgByIdRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Message.IMGetMsgByIdRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetMsgByIdRsp::IsInitialized() const {
  return true;
}

void IMGetMsgByIdRsp::InternalSwap(IMGetMsgByIdRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  msg_list_.InternalSwap(&other->msg_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attach_data_, lhs_arena,
      &other->attach_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMGetMsgByIdRsp, session_id_)
      + sizeof(IMGetMsgByIdRsp::session_id_)
      - PROTOBUF_FIELD_OFFSET(IMGetMsgByIdRsp, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string IMGetMsgByIdRsp::GetTypeName() const {
  return "IM.Message.IMGetMsgByIdRsp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Message
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IM::Message::IMMsgData* Arena::CreateMaybeMessage< ::IM::Message::IMMsgData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMMsgData >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMMsgDataAck* Arena::CreateMaybeMessage< ::IM::Message::IMMsgDataAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMMsgDataAck >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMMsgDataReadAck* Arena::CreateMaybeMessage< ::IM::Message::IMMsgDataReadAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMMsgDataReadAck >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMMsgDataReadNotify* Arena::CreateMaybeMessage< ::IM::Message::IMMsgDataReadNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMMsgDataReadNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMClientTimeReq* Arena::CreateMaybeMessage< ::IM::Message::IMClientTimeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMClientTimeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMClientTimeRsp* Arena::CreateMaybeMessage< ::IM::Message::IMClientTimeRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMClientTimeRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMUnreadMsgCntReq* Arena::CreateMaybeMessage< ::IM::Message::IMUnreadMsgCntReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMUnreadMsgCntReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMUnreadMsgCntRsp* Arena::CreateMaybeMessage< ::IM::Message::IMUnreadMsgCntRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMUnreadMsgCntRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetMsgListReq* Arena::CreateMaybeMessage< ::IM::Message::IMGetMsgListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetMsgListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetMsgListRsp* Arena::CreateMaybeMessage< ::IM::Message::IMGetMsgListRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetMsgListRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetLatestMsgIdReq* Arena::CreateMaybeMessage< ::IM::Message::IMGetLatestMsgIdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetLatestMsgIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetLatestMsgIdRsp* Arena::CreateMaybeMessage< ::IM::Message::IMGetLatestMsgIdRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetLatestMsgIdRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetMsgByIdReq* Arena::CreateMaybeMessage< ::IM::Message::IMGetMsgByIdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetMsgByIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IM::Message::IMGetMsgByIdRsp* Arena::CreateMaybeMessage< ::IM::Message::IMGetMsgByIdRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IM::Message::IMGetMsgByIdRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
